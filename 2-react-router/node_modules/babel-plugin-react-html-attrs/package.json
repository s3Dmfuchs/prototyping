{
  "name": "babel-plugin-react-html-attrs",
  "description": "Babel plugin which transforms HTML attributes in JSX to their React equivalents",
  "version": "2.0.0",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "babel-core": "^6.0.15",
    "babel-preset-react": "^6.0.15",
    "mocha": "^2.3.3"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/insin/babel-plugin-react-html-attrs.git"
  },
  "readme": "# babel-plugin-react-html-attrs\n\nTransforms JSX `class` attributes into `className` and `for` attributes into `htmlFor`, allowing you to copy and paste HTML into your React components without having to manually edit these particular attributes each time.\n\n## Installation & Usage\n\nInstall the plugin:\n\n```\n# For Babel 6\nnpm install --save-dev babel-plugin-react-html-attrs\n\n# For Babel 5\nnpm install --save-dev babel-plugin-react-html-attrs@1.0.0\n```\n\nThen edit your `.babelrc` to include `react-html-attrs`:\n\n```json\n{\n  \"plugins\": [\n    \"react-html-attrs\"\n  ]\n}\n```\n\n## Caveats\n\nRead [facebook/react#4433](https://github.com/facebook/react/issues/4433) for the reasoning behind why React treats these attributes the way it does and the potential gotchas which await you if you use this plugin (an old version of the JSX transformer used to perform this transformation).\n\nIt's fairly common to access a `className` prop in user-defined components, and if you get used to using a `class` prop instead, that you're actually passing `className` is surprising behaviour.\n\n## Attribution\n\nTesting setup cloned from [gaearon/babel-plugin-react-transform](https://github.com/gaearon/babel-plugin-react-transform).\n\n## MIT Licensed\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/insin/babel-plugin-react-html-attrs/issues"
  },
  "_id": "babel-plugin-react-html-attrs@2.0.0",
  "_from": "babel-plugin-react-html-attrs@^2.0.0"
}
